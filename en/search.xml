<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[从零开始搭建Github Page -- 网站页面、内容、功能的添加(Not-translated)]]></title>
    <url>%2Fen%2F2018%2F05%2F22%2Fthird-post-Hexo%2F</url>
    <content type="text"><![CDATA[在完成了网站的搭建、源码备份等工作后,我们可以开始进行网站内容、功能的设置。 前言虽然已经成功部署了网页，但是网页内绝大多数内容都是网页模板的默认设置，非常多的内容和功能是缺失的。因此需要对其进行补充和添加。 区别于Wordpress，简书等平台，在Github Page添加各种内容和功能完全是自由的，而且Hexo也提供了丰富的插件供我们使用。由于暂时我还不需要太多的功能，因为本文只作对网站缺失内容的补充和搜索功能的添加，目的是使其成为一个完整的网站。 网站内容在Next主题的主页中，默认开启了分类（category），归档（archives），标签（tags）三个页面。但是默认配置下，并不存在这三个页面所对应的网页。因此需要对其进行补充。 添加网页的命令如下： 1$ hexo new page 'page_name' 该命令会在 /source文件夹下生成新的&#39;page_name&#39;文件夹。文件夹内包含index.md，用于配置页面。 同时，需要在主题配置文件/themes/config.yml中开启分类、归档、和标签页面： 12345# Menu Settingsmenu: home: / || home tags: /tags/ || tags categories: /categories/ || th 分类 Categories在添加 categories 页面之后,修改其对应的主页文件index.md如下： 12345---title: Categoriesdate: 2018-05-14 23:44:42type: "categories"--- 标签 TagsTags对应的主页如下： 12345---title: Tagsdate: 2018-05-13 21:54:46type: 'tags'--- 归档 Archives归档页面是不用我们手动生成的，但是需要安装相应的插件： 1$ npm install hexo-generator-archive --save Post的设置添加完上述两个页面后，主要在每个post总添加对应的tags或categor，Hexo就能自动帮我们把相应的tags或categories添加到对应的页面。 比如本文的设置如下： 123456---title: 从零开始搭建Github Page -- 网站页面、内容、功能的添加date: 2018-05-22 21:09:01tags: [Web, Github Page] # 多个tags放在[]内，并用‘，’间隔categories: Github page--- 站内搜索 Local Search搜索功能是每个网站都不可或缺的功能，方便读者快速的找的他们所感兴趣的话题。在Hexo中添加搜索功能首先需要安装对应的搜索插件： 1$ npm install --save hexo-generator-search 而该插件默认只能搜索posts，为了实现关于页面的搜索需要在站点配置文件 /config.yml 中做相应的修改： 123456# searchsearch: path: search.xml field: all format: html limit: 10000 同是还需要在主题配置文件/themes/config.yml中启动Local search： 1234# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: enable: true 网站分析 Google Analysis为了分析网站的流量，可以使用网站分析服务。主流的服务主要有Google Analysis，百度等，由于我目前使用GA最方便，此处以GA为例。 在主题配置文件 /themes/config.yml 中如下设置即可： 12# google analytics IDgoogle_analytics: UA-*********-* 结语至此网站所有的基本功能都已经实现了，以后对网站进行调整或者升级之后，会陆续将对应的修改整理更新。]]></content>
      <categories>
        <category>Github page</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Github Page</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零开始搭建Github Page -- 源码备份&双语网站 (Not-translated)]]></title>
    <url>%2Fen%2F2018%2F05%2F21%2Fsecond-post-for-hexo%2F</url>
    <content type="text"><![CDATA[在初步架设了个人Github page后，为了方便多端同步工作，可以将源码通过Github进行备份；其次，为了适应海外工作，架设双语网站。 前言在成功部署网页后，Github上只有生成后的文件，并没有网站的源文件。因此无法异地同步工作，鉴于我目前mac和window同时使用，因此有必要使用Github备份源码。其次，考虑到目前人在北美，也有双语网站的需求。 源码备份备份源码最方便的方法是在username.github.io 仓库（repository）下新开一个分支（branch），并使用该branch备份网站源码。 准备工作首先需要在原仓库下新建一个分支。打开Terminal，定位到源文件所在的文件夹。 1234567$ git remote add origin https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git # 添加远程仓库，注意最后的.git$ git branch # 查看本地分支$ git branch -r #$ git branch source #$ git checkout source ## $ git checkout -b source 然后打开Github将repository的默认branch设为source。 网站主题Github上有相当多的主题可供我们使用，比价广泛使用的是Next，本网站也是用的Next。载入主题只需要在/theme文件夹内使用git clone命令即可。 相关的主题可以在Hexo themes中获取。 然后为了能同步主题配置，需要把/theme/next文件夹下 .git文件删掉。 备份123$ git add . # 添加所有文件$ git commit -m 'new commit' # commit$ git push origin source # 将修改推至云 同步1$ git pull origin source # 同步文件 为了实现远程同步，每次本地修改内容前，都需要将修改pull到本地。完成修改后，都需要将修改push至Giuhub。 网站双语Hexo本身具有在主题配置文件/config.yml修改网站语言的功能，但该功能不能实现两种语言在网站上动态切换。但是我们可以利用该特性实现我们所需要的效果。 实现双语网站的实现，实际上是在网页内部署了另一个完整的网站，再将其语言设置为英文。 首先，我们在根目录/下新建文件夹/en，作为英文网站的根目录。 第二步，在/en文件夹下初始化网站，或将原文件复制一遍（注意删除 .git ）。 修改/en文件夹下的配置文件。 修改配置文件中文页面中文网站中，一共有3处需要修改。 站点配置文件 12# sitelanguage: zh-Hans 主题配置文件 123# Menu settingsmenu: commonweal: /en 主题目录下的语言文件/themes/next/language/zh-Hans.yml 12menu: commonweal: EN 英文网站英文网站中，同样有3处需要修改。 站点配置文件 1234567891011# sitelanguage : en# URLroot: /en/# Directorypublic_dir: ../public/en# Writingnew_post_name: lang/:title.md 主题配置文件 123# Menu Settingsmenu: commonweal: ../ 语言文件（/en/themes/languages/en.yml) 12menu: commonweal: 中文 部署由于/en在原网站生成的过程中不会自动生成，因此实际部署双语网站需要先分别在两个网站中执行生成命令，再统一部署。]]></content>
      <categories>
        <category>Github page</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Github Page</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo入门 Steps to Github Page -- Intro of Hexo]]></title>
    <url>%2Fen%2F2018%2F05%2F15%2FSteps_to_Github_page_Build_it_with_Hexo%2F</url>
    <content type="text"><![CDATA[Start from the beginning, build a personal Github Page by Hexo. IntroGoogle is always the first step to do somthing and no exception for building a Github page. There are lots of tutorials in the web for how to build up such a blog, you can also search on Youtube for vedio tutorial. But somehow I think English tutorial is more like a basic knowledage, they build their pages with Github build-in theme. There are too much for me to set up at the beginning if I do that. Then I turned to Chinese tutorial and found out this Hexo. There are lots of platforms for someone to build their blog, for example, Wordpress, CSDN, or setup a personal sever. The reason I go for Github is that this is the only way that I can own the website totally beside building a sever by myself which will bring too much technical stuff and doesn’t fit my original intention to mark down and systemize the knowledge I learned. Although there are tons of tutorials you can easily reach, the most importance thing I want to emphasize is that you need to keep thinking, analyzing, and logicing down everytime you face a problem. Because these tutorials can not meet all your requirement. There are lots of reference in the whole procedure, here are some important ones (In Chinese): Blog Build a free statis Blog with Github and Hexo Hexo document Add Search on your Hexo blog Build a dual-language blog on hexo PreparationThis tutorial focuses on Mac and Win，based on Hexo 3.7。 About HexoHexo.io:Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds. Install Git, Node.JS, HexoFollor the official document to install Git， Node.js. 1234# To check the installation$ npm -v # 5.6.0$ node -v # v8.11.1$ git --version # git version 2.16.3 HexoFirst step, installation 12# Install Hexo$ npm install -g hexo-cli There are two ways to initialize the website. 12345678# 1. Initialize in target folder$ hexo init # 2. Initialize in new folder$ hexo init &lt;folder&gt;$ cd folder$ npm install# Success, if there is no ouput Install extensions. 12345678910111213npm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-server --savenpm install hexo-deployer-git --savenpm install hexo-deployer-heroku --savenpm install hexo-deployer-rsync --savenpm install hexo-deployer-openshift --savenpm install hexo-renderer-marked@0.2 --savenpm install hexo-renderer-stylus@0.2 --savenpm install hexo-generator-feed@1 --savenpm install hexo-generator-sitemap@1 --save That is all for basic installation. Deploy to local12$ hexo server# Go localhost:4000 to see the page Basic command for Hexo123456$ hexo n 'post_name' # 新建post页面 (new) Create a new post$ hexo new page "page_name" # 新建网络页面 (new page) Create a new post$ hexo g # 生成网页 (generate) Generate the website$ hexo s # 启动服务器 (server) Start local sever$ hexo d # 部署网站 (deploy) Deploy the website$ hexo clean # 清除缓存文件 Clean cache ConfigerationGithubGithub provides a free domain, username.github.io, for every account. We can use this as the domain of our blog or buy a domain to replace it. To use the github page, we need to create a new repository called \.github.io. And we also need to confige SSH and the repository.具体参考技术小白搭建个人博客 github+hexo中的配置部分。 Hexo为了hexo的部署能完成，还需要在./_config.yml文件里进行配置。 配置文件： _config.yml在配置之前，首先是要了解Hexo的配置文件。配置文件一般有两种，中文叫站点配置文件和主题配置文件，分别在./和./themes/themes_name/下。站点配置文件一般用于设置网站的基本信息，譬如网站名， 描述，网址，主题，生成路径等，而主题配置文件一般用于设置网站的结构和功能，譬如页面， *主题模版*等。 部署网页的配置在站点配置文件之下，按如下配置： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/&lt;User_name&gt;/&lt;User_name&gt;.github.io.git branch: master 需要特别注意的是，repo一行最后的.git。 网页部署在网页源文件夹下打开命令行，执行以下命令即可： 123456$ hexo clean$ hexo g$ hexo d# 或者$ hexo clean$ hexo d -g 然后直接在浏览器中打开username.github.io，观看网页部署的效果。一般每次部署都要等几分钟更新。 个人域名如果有需要使用个人域名，在购买了自己的域名后需要对DNS 服务进行配置。由于我在namecheap上买的域名，以下配置都以namecheap为例。打开Dashboard之后，进入AdvanceDNS设置，删除所有默认的Host record。添加3条新的Record如下： Type Host Value TTL A Record @ 192.30.252.153 Automatic A Record @ 192.30.252.153 Automatic CNAME www username.github.io Automatic 其次，在./source文件下新建CNAME文件，内容如下，注意文件无后缀。 1yourdomain.address 保存，重新部署网页即可。 最后部署网页的内容在以上应该都覆盖到了，接下来的的文章依次是 Github备份网页源码以及双语网页设置 网站页面、内容、功能的添加 …]]></content>
      <tags>
        <tag>Web</tag>
        <tag>Github Page</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[About this site.]]></title>
    <url>%2Fen%2F2018%2F05%2F13%2Ffirst-note%2F</url>
    <content type="text"><![CDATA[It has been two or three years since I first came out with the idea to build a personal websit, for me to record my learning journey in Data Science. This dream came to reality finally, at the second day after the end of my first graduate study year. I built this website with a thought that I need a place to hold and archive most of my knowledge in programming, analyzing projects. Most of my notes were lost when I got a new laptop or desktop or graudation. And paper note is quite hard to find what you need in a short time. Both of these reasons drive me to this solution. I hope this website can at least help me in somw way for my leanring. 2018.5.13Greenbelt.]]></content>
      <tags>
        <tag>Something</tag>
      </tags>
  </entry>
</search>
