<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Introduction of Deep Learning]]></title>
    <url>%2F2018%2F05%2F25%2FDL-1%2F</url>
    <content type="text"><![CDATA[It tooks me a long time to finish the courses from Deeplearning.AI, which is founded by Andrew.Ng. Having been in the feild of ML for a while, I decide to walk through the neural network again systematically at the end of this semeter. And here I am, taking Andrew’s courses on Courera. This post is the first post of DL series, starting with my note from the courses and will followed by some Kaggle competition experience or other projects in which I might implement network. IntroductionDeep learning, also called unsupervised Feature Learning. The first term, deep, is named relative to shallow in machine learning. The shallow learning usually refers to SVM, boosting, or any other MaxEnt mathods that contain zero or one hidden layer. In contrast, deep learning has multi-layer perception and used back propagation to train. There are two main part of deep learning. Depth of model. Features learning. The main reasons for DL to take off is the accessibility to huge amount of data in recently years through the digitization of society and the repidly developemnt of computation power. These two factors feed the two parts of high level performance of NN: Being able to train a big enough model. Huge amount of labled data. Training exampleCost function &amp; Gradient DescentCost function, which is generated by loss function, is one of the key concept in network. It evaluates the performance of the existing model and provides a path to update parameters for us to getting a better performace. And that path is called gradient descent. In the course, Andrew used Logistic regression as example. For recap, the logistic regession is: $$\begin{aligned}Given \; x, \;\hat{y}=P(y=1|x), where\; 0\leq\hat{y}\leq1 \;;\\hat{y}^{(j)}=\sigma(w^Tx^{j}+b), \;where\;\sigma(Z^{(j)})=\frac{1}{1+e^{-z^{(j)}}}\end{aligned}$$ The loss function of logistic regession is: $$\begin{aligned}L(\hat{y}^{(j)} , y^{(j)})=&amp;\frac{1}{2}(\hat{y}^{(j)}-j^{(j)})^2 \=&amp;-(y^{(j)}log(\hat{y}^{(j)})+(1-y^{(j)})log(1-\hat{y}^{(j)})\end{aligned}$$ The cost function is: $$\begin{aligned}J(w, b)=&amp;\frac{1}{m}\sum_{i=1}^{m}{L(\hat{y}^{(j)} , y^{(j)})} \=&amp; \frac{1}{m}\sum_{i=1}^{m}{[-(y^{(j)}log(\hat{y}^{(j)})+(1-y^{(j)})log(1-\hat{y}^{(j)})]}\end{aligned}$$ From the loss function &amp; cost function, we are able to calculate the Gradient on each parameter we need to update. The gradient, also called derivative, here indicates the direction on each parameter, from which direction the cost function will fastest descrese. And by descrease, we minimumize the cost function to archieve our training goal. In later of the course, the logistic example Andrew used is slighly different from the model above. The new model is: $$\begin{aligned}z&amp;=w_1x_1+w_2x_2+b \a&amp;=\sigma(z) \L(a, y)&amp;=-ylog(a)+(1-y)log(1-a) \\end{aligned}$$ The derivatives:$$\begin{aligned}da=&amp; \frac{dL(a, y)}{da}=-\frac{y}{a}+\frac{1-y}{1-a} \dz=&amp; \frac{dL(a, y)}{dz}=\frac {dL}{da} \frac{da}{dz}=a-y \dw_1=&amp; \frac{\partial L}{\partial w_1} = x_1 dz \dw_2=&amp; \frac{\partial L}{\partial w_2} = x_2 * dz \db=&amp; \frac{\partial L}{\partial b} = dz\end{aligned}$$ Once we get all the derivative, parameters can be updated as followed: $$\begin{aligned}w_1&amp;=w_1 - \alpha dw_1 \w_2&amp;=w_2 - \alpha dw_2 \b&amp;=b- \alpha* db\end{aligned}$$ And till here, we performed the gradient descent once on one instance. The procedure from input x to loss function &amp; cost function is called forward propagation. And the procedure from lost function &amp; Cost function to update parameter is called back propagation. EndThe example above is demonstrating the training on only one input. To perfrom the whole model training procedure, we need to iterate over all the instances for many times, which will be dscussed in the following posts.]]></content>
      <categories>
        <category>DeepLearning</category>
      </categories>
      <tags>
        <tag>DeepLearning</tag>
        <tag>NN</tag>
        <tag>DataScience</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零开始搭建Github Page -- 网站页面、内容、功能的添加]]></title>
    <url>%2F2018%2F05%2F22%2Fthird-post-Hexo%2F</url>
    <content type="text"><![CDATA[在完成了网站的搭建、源码备份等工作后,我们可以开始进行网站内容、功能的设置。 前言虽然已经成功部署了网页，但是网页内绝大多数内容都是网页模板的默认设置，非常多的内容和功能是缺失的。因此需要对其进行补充和添加。 区别于Wordpress，简书等平台，在Github Page添加各种内容和功能完全是自由的，而且Hexo也提供了丰富的插件供我们使用。由于暂时我还不需要太多的功能，因为本文只作对网站缺失内容的补充和搜索功能的添加，目的是使其成为一个完整的网站。 网站内容在Next主题的主页中，默认开启了分类（category），归档（archives），标签（tags）三个页面。但是默认配置下，并不存在这三个页面所对应的网页。因此需要对其进行补充。 添加网页的命令如下： 1$ hexo new page 'page_name' 该命令会在 /source文件夹下生成新的&#39;page_name&#39;文件夹。文件夹内包含index.md，用于配置页面。 同时，需要在主题配置文件/themes/config.yml中开启分类、归档、和标签页面： 12345# Menu Settingsmenu: home: / || home tags: /tags/ || tags categories: /categories/ || th 分类 Categories在添加 categories 页面之后,修改其对应的主页文件index.md如下： 12345---title: Categoriesdate: 2018-05-14 23:44:42type: "categories"--- 标签 TagsTags对应的主页如下： 12345---title: Tagsdate: 2018-05-13 21:54:46type: 'tags'--- 归档 Archives归档页面是不用我们手动生成的，但是需要安装相应的插件： 1$ npm install hexo-generator-archive --save Post的设置添加完上述两个页面后，主要在每个post总添加对应的tags或categor，Hexo就能自动帮我们把相应的tags或categories添加到对应的页面。 比如本文的设置如下： 123456---title: 从零开始搭建Github Page -- 网站页面、内容、功能的添加date: 2018-05-22 21:09:01tags: [Web, Github Page] # 多个tags放在[]内，并用‘，’间隔categories: Github page--- 站内搜索 Local Search搜索功能是每个网站都不可或缺的功能，方便读者快速的找的他们所感兴趣的话题。在Hexo中添加搜索功能首先需要安装对应的搜索插件： 1$ npm install --save hexo-generator-search 而该插件默认只能搜索posts，为了实现关于页面的搜索需要在站点配置文件 /config.yml 中做相应的修改： 123456# searchsearch: path: search.xml field: all format: html limit: 10000 同是还需要在主题配置文件/themes/config.yml中启动Local search： 1234# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: enable: true 网站分析 Google Analysis为了分析网站的流量，可以使用网站分析服务。主流的服务主要有Google Analysis，百度等，由于我目前使用GA最方便，此处以GA为例。 在主题配置文件 /themes/config.yml 中如下设置即可： 12# google analytics IDgoogle_analytics: UA-*********-* 结语至此网站所有的基本功能都已经实现了，以后对网站进行调整或者升级之后，会陆续将对应的修改整理更新。]]></content>
      <categories>
        <category>Github page</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Github Page</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零开始搭建Github Page -- 源码备份&双语网站]]></title>
    <url>%2F2018%2F05%2F21%2Fsecond-post-for-hexo%2F</url>
    <content type="text"><![CDATA[在初步架设了个人Github page后，为了方便多端同步工作，可以将源码通过Github进行备份；其次，为了适应海外工作，架设双语网站。 前言在成功部署网页后，Github上只有生成后的文件，并没有网站的源文件。因此无法异地同步工作，鉴于我目前mac和window同时使用，因此有必要使用Github备份源码。其次，考虑到目前人在北美，也有双语网站的需求。 源码备份备份源码最方便的方法是在username.github.io 仓库（repository）下新开一个分支（branch），并使用该branch备份网站源码。 准备工作首先需要在原仓库下新建一个分支。打开Terminal，定位到源文件所在的文件夹。 1234567$ git remote add origin https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git # 添加远程仓库，注意最后的.git$ git branch # 查看本地分支$ git branch -r #$ git branch source #$ git checkout source ## $ git checkout -b source 然后打开Github将repository的默认branch设为source。 网站主题Github上有相当多的主题可供我们使用，比价广泛使用的是Next，本网站也是用的Next。载入主题只需要在/theme文件夹内使用git clone命令即可。 相关的主题可以在Hexo themes中获取。 然后为了能同步主题配置，需要把/theme/next文件夹下 .git文件删掉。 备份123$ git add . # 添加所有文件$ git commit -m 'new commit' # commit$ git push origin source # 将修改推至云 同步1$ git pull origin source # 同步文件 为了实现远程同步，每次本地修改内容前，都需要将修改pull到本地。完成修改后，都需要将修改push至Giuhub。 网站双语Hexo本身具有在主题配置文件/config.yml修改网站语言的功能，但该功能不能实现两种语言在网站上动态切换。但是我们可以利用该特性实现我们所需要的效果。 实现双语网站的实现，实际上是在网页内部署了另一个完整的网站，再将其语言设置为英文。 首先，我们在根目录/下新建文件夹/en，作为英文网站的根目录。 第二步，在/en文件夹下初始化网站，或将原文件复制一遍（注意删除 .git ）。 修改/en文件夹下的配置文件。 修改配置文件中文页面中文网站中，一共有3处需要修改。 站点配置文件 12# sitelanguage: zh-Hans 主题配置文件 123# Menu settingsmenu: commonweal: /en 主题目录下的语言文件/themes/next/language/zh-Hans.yml 12menu: commonweal: EN 英文网站英文网站中，同样有3处需要修改。 站点配置文件 1234567891011# sitelanguage : en# URLroot: /en/# Directorypublic_dir: ../public/en# Writingnew_post_name: lang/:title.md 主题配置文件 123# Menu Settingsmenu: commonweal: ../ 语言文件（/en/themes/languages/en.yml) 12menu: commonweal: 中文 部署由于/en在原网站生成的过程中不会自动生成，因此实际部署双语网站需要先分别在两个网站中执行生成命令，再统一部署。]]></content>
      <categories>
        <category>Github page</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Github Page</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零开始搭建Github Page -- Hexo入门]]></title>
    <url>%2F2018%2F05%2F15%2FSteps_to_Github_page_Build_it_with_Hexo%2F</url>
    <content type="text"><![CDATA[从零开始，使用Hexo搭建个人Github page. 前言从零开始一个博客，只能从Google开始。网上能轻易搜到的教程不少，但用的平台无非几个，CSDN, 简书，知乎专栏，Github，Wordpress。对于我而言，前面的三个都不是我的选择，因为他们都没办法自己管理数据，所以只能选择Github page或者Wordpress。本来wordpress已经几乎搭建好了，但是域名转接要花钱，觉得暂时没必要，故而选择Github。Github自由一点，可以随意发挥，只是又一次开始了无穷的折腾。 首先，最重要的是，诸多的帖子都不一定能满足自己的需求或者达到它所描述的效果。关键还事在于不断的思考和分析，然后摸索出自己的路。 整个过程参考过的帖子很多，这里放出来一部分比较重要的：使用GitHub和Hexo搭建免费静态BlogHexo documentHexo博客添加搜索功能hexo实现中英双语博客教程 准备工作本文针对Mac和Win，以及Hexo 3.7。 About HexoHexo.io:Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析 文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装Git, Node.JS, HexoGithub， Node.js 按着官网步骤安装即可。 1234# 检查是否安装成功$ npm -v # 5.6.0$ node -v # v8.11.1$ git --version # git version 2.16.3 Hexo首先是安装。 12# 安装Hexo$ npm install -g hexo-cli 初始化网站有两种方法。 12345678# 1. 在目标文件夹内初始化$ hexo init # 初始化网站# 2. 新建文件夹初始化$ hexo init &lt;folder&gt;$ cd folder$ npm install # 没有任何错误提示的话，就是成功了 完成之后安装插件。 12345678910111213npm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-server --savenpm install hexo-deployer-git --savenpm install hexo-deployer-heroku --savenpm install hexo-deployer-rsync --savenpm install hexo-deployer-openshift --savenpm install hexo-renderer-marked@0.2 --savenpm install hexo-renderer-stylus@0.2 --savenpm install hexo-generator-feed@1 --savenpm install hexo-generator-sitemap@1 --save 至此初步的安装就算结束了。 本地查看1$ hexo server 到本地查看效果即可。 Hexo基本操作123456$ hexo n 'post_name' # 新建post页面 (new)$ hexo new page "page_name" # 新建网络页面 (new page)$ hexo g # 生成网页 (generate)$ hexo s # 启动服务器 (server)$ hexo d # 部署网站 (deploy)$ hexo clean # 清除缓存文件 配置Github每个账号能提供一个免费的域名给我们建立Github page，username.github.io。我们可以直接使用这个域名，也可以使用自己购买的域名。 使用Github page我们需要用username.github.io作为名字新建一个repository，新建完成后使用默认配置即可。 为了正常的部署网站，还需要配置SSH和Github仓库。具体参考技术小白搭建个人博客 github+hexo中的配置部分。 Hexo为了hexo的部署能完成，还需要在./_config.yml文件里进行配置。 配置文件： _config.yml在配置之前，首先是要了解Hexo的配置文件。配置文件一般有两种，中文叫站点配置文件和主题配置文件，分别在./和./themes/themes_name/下。站点配置文件一般用于设置网站的基本信息，譬如网站名， 描述，网址，主题，生成路径等，而主题配置文件一般用于设置网站的结构和功能，譬如页面， *主题模版*等。 部署网页的配置在站点配置文件之下，按如下配置： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/&lt;User_name&gt;/&lt;User_name&gt;.github.io.git branch: master 需要特别注意的是，repo一行最后的.git。 网页部署在网页源文件夹下打开命令行，执行以下命令即可： 123456$ hexo clean$ hexo g$ hexo d# 或者$ hexo clean$ hexo d -g 然后直接在浏览器中打开username.github.io，观看网页部署的效果。一般每次部署都要等几分钟更新。 个人域名如果有需要使用个人域名，在购买了自己的域名后需要对DNS 服务进行配置。由于我在namecheap上买的域名，以下配置都以namecheap为例。打开Dashboard之后，进入AdvanceDNS设置，删除所有默认的Host record。添加3条新的Record如下： Type Host Value TTL A Record @ 192.30.252.153 Automatic A Record @ 192.30.252.153 Automatic CNAME www username.github.io Automatic 其次，在./source文件下新建CNAME文件，内容如下，注意文件无后缀。 1yourdomain.address 保存，重新部署网页即可。 最后部署网页的内容在以上应该都覆盖到了，接下来的的文章依次是 Github备份网页源码以及双语网页设置 网站页面、内容、功能的添加 …]]></content>
      <tags>
        <tag>Web</tag>
        <tag>Github Page</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[About this site.]]></title>
    <url>%2F2018%2F05%2F13%2Ffirst-note%2F</url>
    <content type="text"><![CDATA[My first post.想开这个Blog估计有两三年了，一直没有走出实际的一步。终于在研一结束后的第二天，用hexo在github上线最简陋的模板。折腾了一圈，准备好的域名 tsim.xyz 暂时没能正常用上，总是什么都显示不出来。 开blog的初衷,是需要一个地方把一直以来各种地方用到的，学到的知识整理归纳，方便自己以后再用。用笔记本，抑或Markdown，一换电脑总会出现各种找不到文件的情况，而且大多数的非电子文档也不方便搜索，复用起来效率低下。这几年重重复复刷了好多遍基础的知识，譬如Pandas, plt, scrapy之类的，感觉最终我也只是记住了个框架，各种细枝末节事后忘得一干二净，希望通过这网站能让我记录下来每次的折腾。 另外，有个地方偶尔说说杂事也是极好的。 2018.5.13Greenbelt.]]></content>
      <tags>
        <tag>Something</tag>
      </tags>
  </entry>
</search>
